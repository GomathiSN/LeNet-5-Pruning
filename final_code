import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
import json


class LeNet(nn.Module):
    def __init__(self):
        super(LeNet, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, 3)
        self.conv2 = nn.Conv2d(6, 16, 3)
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv2(x)), 2)
        x = x.view(-1, int(x.nelement() / x.shape[0]))
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return F.log_softmax(x, dim=1)


class PruningWeight:
    def __init__(self, ratio=0.5):
        self.MaskList = []
        self.threshold = []
        self.ratio = ratio

    def Init(self, model):
        for m in model.modules():
            if isinstance(m, nn.Linear) or isinstance(m, nn.Conv2d):
                with torch.no_grad():
                    m.weight.copy_(self._SetUpPruning(m.weight, self.ratio))

    def _SetUpPruning(self, weight, ratio):
        _threshold = self._FindMidValue(weight, ratio)
        sparse_weight, _Mask = self._InitMask(weight, _threshold)
        self.threshold.append(_threshold)
        self.MaskList.append(_Mask)
        return sparse_weight

    def _FindMidValue(self, weight, ratio):
        flatten_weight = torch.flatten(torch.abs(weight))
        sorted, _ = torch.sort(flatten_weight)
        index = int(ratio * flatten_weight.size()[0])
        threshold = sorted[index]
        return threshold

    def _InitMask(self, w, threshold):
        mask = torch.abs(w).ge(threshold).float()
        w[torch.abs(w) < threshold] = 0.0
        return w, mask

    def RecoverSparse(self, model):
        _idx = 0
        for m in model.modules():
            if isinstance(m, nn.Linear) or isinstance(m, nn.Conv2d):
                with torch.no_grad():
                    m.weight.copy_(m.weight * self.MaskList[_idx])
                _idx += 1

    def TestSparse(self, model):
        zero_cnt = 0
        all_cnt = 0
        for m in model.modules():
            if isinstance(m, nn.Linear) or isinstance(m, nn.Conv2d):
                w = m.weight
                zero_cnt += torch.sum((w == 0).int()).item()
                all_cnt += w.nelement()
        sparsity = 1.0 * zero_cnt / all_cnt
        print('The sparsity of the model is {:.3f}'.format(sparsity))
        return sparsity


def train(args, model, device, train_loader, optimizer, epoch, prune):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)
        loss.backward()
        optimizer.step()
        prune.RecoverSparse(model)


def test(args, model, device, test_loader, res):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.nll_loss(output, target, reduction='sum').item()
            pred = output.argmax(dim=1, keepdim=True)
            correct += pred.eq(target.view_as(pred)).sum().item()
    test_loss /= len(test_loader.dataset)
    accuracy = 100. * correct / len(test_loader.dataset)
    res.append({'loss': test_loss, 'accuracy': accuracy})
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(test_loader.dataset), accuracy))


def main():
    parser = argparse.ArgumentParser(description='PyTorch MNIST LeNet-5 Pruning Example')
    parser.add_argument('--batch-size', type=int, default=128)
    parser.add_argument('--test-batch-size', type=int, default=1000)
    parser.add_argument('--epochs', type=int, default=10)
    parser.add_argument('--fine-tune-epochs', type=int, default=5)
    parser.add_argument('--lr', type=float, default=0.01)
    parser.add_argument('--momentum', type=float, default=0.9)
    parser.add_argument('--no-cuda', action='store_true', default=False)
    parser.add_argument('--seed', type=int, default=1)
    parser.add_argument('--prune-ratio', type=float, default=0.5)
    args = parser.parse_args()
    use_cuda = not args.no_cuda and torch.cuda.is_available()
    torch.manual_seed(args.seed)
    device = torch.device("cuda" if use_cuda else "cpu")
    kwargs = {'num_workers': 1, 'pin_memory': True} if use_cuda else {}
    train_loader = torch.utils.data.DataLoader(
        datasets.MNIST('./data', train=True, download=True,
                       transform=transforms.Compose([
                           transforms.ToTensor(),
                           transforms.Normalize((0.1307,), (0.3081,))
                       ])),
        batch_size=args.batch_size, shuffle=True, **kwargs)
    test_loader = torch.utils.data.DataLoader(
        datasets.MNIST('./data', train=False, transform=transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.1307,), (0.3081,))
        ])),
        batch_size=args.test_batch_size, shuffle=True, **kwargs)

    model = LeNet().to(device)
    optimizer = optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum)

    prune = PruningWeight(ratio=args.prune_ratio)
    prune.Init(model)

    results = []

    for epoch in range(1, args.epochs + 1):
        train(args, model, device, train_loader, optimizer, epoch, prune)
        test(args, model, device, test_loader, results)

    print("\nApplying pruning and fine-tuning...")
    prune.RecoverSparse(model)
    optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

    for epoch in range(1, args.fine_tune_epochs + 1):
        train(args, model, device, train_loader, optimizer, epoch, prune)
        test(args, model, device, test_loader, results)

    final_sparsity = prune.TestSparse(model)

    with open('results.json', 'w') as f:
        json.dump({'final_sparsity': final_sparsity, 'results': results}, f, indent=4)


if __name__ == '__main__':
    main()
